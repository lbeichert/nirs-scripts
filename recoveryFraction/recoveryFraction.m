function [ baselineData, insultData, recoveredData ] = recoveryFraction( signalName, pigData, halfW )
%RECOVERYFRACTION graphical interface for determining recovery fraction
% inputs:
%
% signalName: name of signal spelled exactly as in pigData(i).headers
% pigData: one entry (i.e. one pig) of pigDataNTB-struct as generated by DataAnalyse
% halfW: half the number of data points taken for averaging
%
% outputs:
%
% baselineData = [meanBefore, stdBefore] : mean and standard deviation of first set of datapoints
% insultData = [meanInsult, stdInsult] : mean and standard deviation at insult
% recoveredData = [meanAfter, stdAfter]; mean and standard deviation of last set of datapoints
%
% author: Lukas Beichert
% date: 11/07/2014




%% load in data and set variables
S = pigData;
D = S.data;
time = S.elapsed;
pigNum = S.subj;

signalNum = find(strcmp(S.headers, signalName));
signal = D(:, signalNum);




%% create figure
f = figure('name', [S.subj, ' ', pigNum], 'units','normalized','position',[0.1 0.4 0.8 0.5], 'userdata', [0,0]);

plot(time, signal);
title([S.subj, ': ', signalName]);
% create line for display of mean value
currentLine = line();
set(currentLine, 'XData', [], 'YData', []);

% set datacursor options
datacursormode on;
dcm_obj = datacursormode(f);
set(dcm_obj, 'UpdateFcn', {@updateDisplay, time, signal, halfW, currentLine});

% create buttons
buttonBaseline = uicontrol('Style', 'pushbutton', 'String', 'Baseline', 'Position', [0, 0, 100, 20], 'userdata', 0, 'Callback', {@updateButton} );
buttonInsult = uicontrol('Style', 'pushbutton', 'String', 'Insult', 'Position', [120, 0, 100, 20], 'userdata', 0, 'Callback', {@updateButton} );
buttonRecovered = uicontrol('Style', 'pushbutton', 'String', 'Recovered', 'Position', [240, 0, 100, 20], 'userdata', 0, 'Callback', {@updateButton} );
buttonDone = uicontrol('Style', 'pushbutton', 'String', 'Done', 'Position', [360, 0, 100, 20], 'userdata', 0, 'Callback', 'set(gcbo, ''userdata'', 1)' );

% keep running until done-button pushed
while true
    try
        if get(buttonDone, 'userData')
            break;
        end
    catch err
        % window closed, stop program
        baselineData = 'stop';
        insultData = NaN;
        recoveredData = NaN;
        return
    end
    pause(0.5)
end

%% read out button data for return
baselineData = get(buttonBaseline, 'userdata');
insultData = get(buttonInsult, 'userdata');
recoveredData = get(buttonRecovered, 'userdata');

% tidy up
delete(f);

end

function txt = updateDisplay(~, event_obj, time, signal, halfW, currentLine)
pos = event_obj.Position;
x = pos(1);
y = pos(2);
ind = find(time == x);

txt = ['X: ', num2str(x), ' Y: ', num2str(y)];

% return error if cursor too close too edge
if ind < halfW+1 || ind > length(time)-halfW
    txt = 'cursor position too close to edge of graph!';
    return;
end

% calculate mean and std and save to figure's userdata
meanVal = mean(signal((ind-halfW):(ind+halfW)));
stDev = std(signal((ind-halfW):(ind+halfW)));
set(0, 'userdata', [meanVal, stDev]);

% update line position
set(currentLine, 'XData', [time(ind-halfW), time(ind+halfW)], 'YData',[meanVal, meanVal]);

end

function [] = updateButton(buttonH, event_obj)
% get figure's user data
ud = get(0, 'userdata');

% update button userdata
set(buttonH, 'userdata', ud);

% update button label
meanVal = ud(1);
stDev = ud(2);
str = [sprintf('%0.2f', meanVal), ' +/- ', sprintf('%0.2f', stDev)];
set(buttonH, 'String', str);

end
